Wrote profile results to min_line_profiler.py.lprof
Timer unit: 1e-06 s

Total time: 0.000112 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: add_cons at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def add_cons(matrix):
    10                                               """
    11                                               Checks if 1 extra constraint can be added to the matrix, this means that there are at least two rows of all
    12                                               0 elements. If this condition is not satisfied, our program will not allow the user to add additional constraints.
    13                                               
    14                                               Args:
    15                                               
    16                                                   matrix (numpy array): matrix to be reviewed.
    17                                               
    18                                               Returns:
    19                                               
    20                                                   Flag (bool): True or False indicating whether 1+ constraints can be added.
    21                                               """
    22                                           
    23         2          4.0      2.0      3.6      lr = len(matrix[:, 0])
    24         2          1.0      0.5      0.9      empty = []
    25                                           
    26         8          7.0      0.9      6.2      for i in range(lr):
    27         6          3.0      0.5      2.7          total = 0
    28        42         41.0      1.0     36.6          for j in matrix[i, :]:
    29        36         43.0      1.2     38.4              total += j**2
    30         6          7.0      1.2      6.2          if total == 0:
    31         5          4.0      0.8      3.6              empty.append(total)
    32                                           
    33         2          1.0      0.5      0.9      if len(empty) > 1:
    34         2          1.0      0.5      0.9          return True
    35                                               else:
    36                                                   return False

Total time: 0.000357 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: constrain at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           @profile
    40                                           def constrain(matrix, eq, memory_prof=False):
    41                                               """
    42                                               Adds constraints to the problem.
    43                                               
    44                                               Args:
    45                                                   matrix (numpy array): matrix defined with :mod:`create_matrix`.
    46                                                   eq (string): coefficients of constraints expressions. Use **L** for *less than*, **G** for *greater than*,
    47                                                   **E** for *equal to*.
    48                                               
    49                                               >>> problem_matrix = create_matrix(2,3)   # 2 variables and 3 constraints
    50                                               >>> constrain(problem_matrix,'1,L,4')     # x_1 <= 4
    51                                               >>> constrain(problem_matrix,'0,2,L,12')  # 2x_2 <= 12
    52                                               >>> constrain(problem_matrix,'3,2,G,18')  # 3x_1 + 2x_2 >= 18
    53                                               """
    54                                           
    55         2          2.0      1.0      0.6      if 'E' in eq:
    56                                                   if add_cons(matrix):
    57                                                       lc = len(matrix[0, :])
    58                                                       lr = len(matrix[:, 0])
    59                                                       var = lc - lr - 1
    60                                                       j = 0
    61                                           
    62                                                       while j < lr:
    63                                                           row_check = matrix[j,:]
    64                                                           total = 0
    65                                                           for i in row_check:
    66                                                               total += float(i**2)
    67                                                           if total == 0:
    68                                                               row = row_check
    69                                                               break
    70                                                           j += 1
    71                                                           
    72                                                       eq = convert(eq)
    73                                                       i = 0
    74                                                       
    75                                                       while i<len(eq)-1:
    76                                                           row[i] = eq[i]
    77                                                           i += 1
    78                                                       
    79                                                       row[-1] = eq[-1]
    80                                                       #row[var+j] = 1
    81                                                   
    82                                                   else:
    83                                                       logging.info('Cannot add another constraint.')
    84                                                   
    85                                               else:
    86         2        171.0     85.5     47.9          if add_cons(matrix):
    87         2          2.0      1.0      0.6              lc = len(matrix[0, :])
    88         2          2.0      1.0      0.6              lr = len(matrix[:, 0])
    89         2          2.0      1.0      0.6              var = lc - lr -1
    90         2          1.0      0.5      0.3              j = 0
    91                                                       
    92         3          2.0      0.7      0.6              while j < lr:
    93         3          3.0      1.0      0.8                  row_check = matrix[j, :]
    94         3          3.0      1.0      0.8                  total = 0
    95        21         20.0      1.0      5.6                  for i in row_check:
    96        18         26.0      1.4      7.3                      total += float(i**2)
    97         3          2.0      0.7      0.6                  if total == 0:
    98         2          2.0      1.0      0.6                      row = row_check
    99         2          2.0      1.0      0.6                      break
   100         1          1.0      1.0      0.3                  j +=1
   101                                                           
   102         2         95.0     47.5     26.6              eq = convert(eq)
   103         2          3.0      1.5      0.8              i = 0
   104                                                       
   105         6          6.0      1.0      1.7              while i<len(eq)-1:
   106         4          5.0      1.2      1.4                  row[i] = eq[i]
   107         4          2.0      0.5      0.6                  i += 1
   108                                                       
   109         2          1.0      0.5      0.3              row[-1] = eq[-1]
   110         2          2.0      1.0      0.6              row[var+j] = 1
   111                                                       
   112                                                   else:
   113                                                       logging.info('Cannot add another constraint.')
   114         2          1.0      0.5      0.3      if memory_prof:
   115                                                   return matrix
   116                                           
   117         2          1.0      0.5      0.3      if memory_prof:
   118                                                   return matrix

Total time: 4.8e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: add_obj at line 122

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   122                                           @profile
   123                                           def add_obj(matrix):
   124                                               """
   125                                               Verifies if the objective function can be added.
   126                                               
   127                                               Args:
   128                                               
   129                                                   matrix (numpy array): matrix to be reviewed.
   130                                               
   131                                               Returns:
   132                                               
   133                                                   Flag (bool): True or False indicating whether objective function can be added.
   134                                               """
   135                                               
   136         1          2.0      2.0      4.2      lr = len(matrix[:,0])
   137         1          1.0      1.0      2.1      empty = []
   138                                               
   139         4          1.0      0.2      2.1      for i in range(lr):
   140         3          1.0      0.3      2.1          total = 0
   141        21         17.0      0.8     35.4          for j in matrix[i, :]:
   142        18         21.0      1.2     43.8              total += j**2
   143         3          2.0      0.7      4.2          if total == 0:
   144         1          1.0      1.0      2.1              empty.append(total)
   145                                               
   146         1          1.0      1.0      2.1      if len(empty) == 1:
   147         1          1.0      1.0      2.1          return True
   148                                               else:
   149                                                   return False

Total time: 0.000157 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: obj at line 152

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   152                                           @profile
   153                                           def obj(matrix,eq,memory_prof=False):
   154                                               """
   155                                               Adds the objective function to the problem matrix.
   156                                               
   157                                               .. note::
   158                                                   Objective function must be added **after** constraints have been input.
   159                                               
   160                                               Args:
   161                                               
   162                                                   matrix (numpy array): matrix defined with :mod:`create_matrix`.
   163                                                   
   164                                                   eq (string): coefficients of objective function.
   165                                               
   166                                               >>> problem_matrix = create_matrix(2,3)   # 2 variables and 3 constraints
   167                                               >>> constrain(problem_matrix,'1,L,4')     # x_1 <= 4
   168                                               >>> constrain(problem_matrix,'0,2,L,12')  # 2x_2 <= 12
   169                                               >>> constrain(problem_matrix,'4,2,G,18')  # 4x_1 + 2x_2 >= 18
   170                                               >>> obj(problem_matrix,'3,5,0')           # 3x_1 + 5x_2
   171                                               """
   172                                               
   173         1         82.0     82.0     52.2      if add_obj(matrix):
   174         1          5.0      5.0      3.2          eq = [float(i) for i in eq.split(',')]
   175         1          1.0      1.0      0.6          lr = len(matrix[:,0])
   176         1          1.0      1.0      0.6          row = matrix[lr-1,:]
   177         1         56.0     56.0     35.7          i = 0
   178         3          4.0      1.3      2.5          while i<len(eq)-1:
   179         2          3.0      1.5      1.9              row[i] = eq[i]*-1
   180         2          2.0      1.0      1.3              i +=1
   181         1          1.0      1.0      0.6          row[-2] = 1
   182         1          1.0      1.0      0.6          row[-1] = eq[-1]
   183                                               else:
   184                                                   logging.info('You must finish adding constraints before the objective function can be added.')
   185                                           
   186         1          1.0      1.0      0.6      if memory_prof:
   187                                                   return matrix

Total time: 0 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: maxz at line 190

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   190                                           @profile
   191                                           def maxz(matrix, aux=True):
   192                                               """
   193                                               Creates maximization function. Determines if 1 extra pivot is required, locates the pivot element,
   194                                               pivots about it and continues the process until all negative elements have been removed from
   195                                               the last column and row.
   196                                               
   197                                               Args:
   198                                               
   199                                                   matrix (numpy array): problem matrix with constraints and objective function added.
   200                                               
   201                                               Returns:
   202                                               
   203                                                   *(dict)* A dictionary with Max and variables.
   204                                                   
   205                                               >>> problem_matrix = create_matrix(2,3)   # 2 variables and 3 constraints
   206                                               >>> constrain(problem_matrix,'1,L,4')     # x_1 <= 4
   207                                               >>> constrain(problem_matrix,'0,2,L,12')  # 2x_2 <= 12
   208                                               >>> constrain(problem_matrix,'4,2,G,18')  # 4x_1 + 2x_2 >= 18
   209                                               >>> obj(problem_matrix,'3,5,0')           # 3x_1 + 5x_2
   210                                               >>> maxz(problem_matrix)
   211                                               {'x1': 4.0, 'x2': 6.0, 'max': 42.0}
   212                                               """
   213                                               
   214                                               while pivots_col(matrix):
   215                                                   matrix = pivot(find_pivot_col(matrix)[0], find_pivot_col(matrix)[1], matrix)
   216                                               while pivots_row(matrix):
   217                                                   matrix = pivot(find_pivot_row(matrix)[0], find_pivot_row(matrix)[1], matrix)
   218                                               
   219                                               lc = len(matrix[0, :])
   220                                               lr = len(matrix[:, 0])
   221                                               var = lc - lr - 1
   222                                               i = 0
   223                                               val = {}
   224                                               
   225                                               for i in range(var):
   226                                                   col = matrix[:, i]
   227                                                   s = sum(col)
   228                                                   m = max(col)
   229                                                   if float(s) == float(m):
   230                                                       loc = np.where(col == m)[0][0]
   231                                                       val[gen_var(matrix)[i]] = matrix[loc, -1]
   232                                                   else:
   233                                                       val[gen_var(matrix)[i]] = 0
   234                                               val['max'] = matrix[-1, -1]
   235                                               
   236                                               return val

Total time: 0.000702 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: minz at line 239

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   239                                           @profile
   240                                           def minz(matrix, aux=True):
   241                                               """
   242                                               Creates minimization function. Determines if 1 extra pivot is required, locates the pivot element,
   243                                               pivots about it and continues the process until all negative elements have been removed from 
   244                                               the last column and row.
   245                                               
   246                                               Args:
   247                                               
   248                                                   matrix (numpy array): problem matrix with constraints and objective function added.
   249                                               
   250                                               Returns:
   251                                               
   252                                                   (dict) A dictionary with Min and variables.
   253                                                   
   254                                               >>> problem_matrix = create_matrix(2,4)   # 2 variables and 4 constraints
   255                                               >>> constrain(problem_matrix,'1,1,L,6')   # x_1 + x_2 <= 6
   256                                               >>> constrain(problem_matrix,'-1,2,L,8')  # -x_1 + 2x_2 <= 8
   257                                               >>> constrain(problem_matrix,'1,G,0')     # x_1 >= 0
   258                                               >>> constrain(problem_matrix,'0,1,G,0')   # x_2 >= 0
   259                                               >>> obj(problem_matrix,'-1,-3,0')         # -x_1 - 3x_2
   260                                               >>> minz(problem_matrix)
   261                                               {'x1': 1.3333333333333333, 'x2': 4.666666666666667}
   262                                               """
   263                                           
   264         1         30.0     30.0      4.3      matrix = convert_min(matrix)
   265         1         12.0     12.0      1.7      while pivots_col(matrix):
   266                                                   matrix = pivot(find_pivot_col(matrix)[0], find_pivot_col(matrix)[1], matrix)
   267         3         90.0     30.0     12.8      while pivots_row(matrix):
   268         2        468.0    234.0     66.7          matrix = pivot(find_pivot_row(matrix)[0], find_pivot_row(matrix)[1], matrix)
   269                                               
   270         1          2.0      2.0      0.3      lc = len(matrix[0, :])
   271         1          1.0      1.0      0.1      lr = len(matrix[:, 0])
   272         1          1.0      1.0      0.1      var = lc - lr - 1
   273         1          1.0      1.0      0.1      i = 0
   274         1          1.0      1.0      0.1      val = {}
   275                                               
   276         3          4.0      1.3      0.6      for i in range(var):
   277         2          3.0      1.5      0.4          col = matrix[:, i]
   278         2          9.0      4.5      1.3          s = sum(col)
   279         2          6.0      3.0      0.9          m = max(col)
   280         2          4.0      2.0      0.6          if float(s) == float(m):
   281         2         27.0     13.5      3.8              loc = np.where(col == m)[0][0]
   282         2         39.0     19.5      5.6              val[gen_var(matrix)[i]] = matrix[loc, -1]
   283                                                   else:
   284                                                       val[gen_var(matrix)[i]] = 0
   285         1          2.0      2.0      0.3      val['min'] = matrix[-1, -1]*-1
   286                                           
   287         1          1.0      1.0      0.1      if aux:
   288         1          1.0      1.0      0.1          return val

Total time: 7e-06 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: create_matrix at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def create_matrix(variables, constraints):
     7                                               """
     8                                               Creates a matrix with enough rows for each constraint plus the objective function
     9                                               and enough columns for all the variables.
    10                                               
    11                                               Args:
    12                                               
    13                                                   variables (int): number of variables.
    14                                                   
    15                                                   constraints (int): number of constraints.
    16                                               
    17                                               Returns:
    18                                               
    19                                                   matrix (numpy array): zero matrix.
    20                                               """
    21                                               
    22         1          6.0      6.0     85.7      matrix = np.zeros((constraints + 1, variables + constraints + 2))
    23                                               
    24         1          1.0      1.0     14.3      return matrix

Total time: 6e-06 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: pivots_col at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def pivots_col(matrix):
    29                                               """
    30                                               Checks to see if pivots are required due to negative values in right column,
    31                                               excluding the bottom value.
    32                                               
    33                                               Args:
    34                                               
    35                                                   matrix (numpy array): matrix to be reviewed.
    36                                                   
    37                                               Returns:
    38                                               
    39                                                   Flag (bool): True or False indicating whether a negative element was found.
    40                                               """
    41                                               
    42         1          4.0      4.0     66.7      m = min(matrix[:-1, -1])
    43         1          1.0      1.0     16.7      if m >= 0:
    44         1          1.0      1.0     16.7          return False
    45                                               else:
    46                                                   return True

Total time: 9.1e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: pivots_row at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                           @profile
    50                                           def pivots_row(matrix):
    51                                               """
    52                                               Checks to see if pivots are required due to negative values in bottom row, 
    53                                               excluding the final value.
    54                                               
    55                                               Args:
    56                                               
    57                                                   matrix (numpy array): matrix to be reviewed.
    58                                                   
    59                                               Returns:
    60                                               
    61                                                   Flag (bool): True or False indicating whether a negative element was found.
    62                                               """
    63                                               
    64         7         10.0      1.4     11.0      l = len(matrix[:, 0])
    65         7         71.0     10.1     78.0      m = min(matrix[l-1, :-1])
    66         7          8.0      1.1      8.8      if m >= 0:
    67         1          0.0      0.0      0.0          return False
    68                                               else:
    69         6          2.0      0.3      2.2          return True

Total time: 0 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_negative_col at line 72

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    72                                           @profile
    73                                           def find_negative_col(matrix):
    74                                               """
    75                                               Finds location of negative values in right column.
    76                                               
    77                                               Args:
    78                                                   
    79                                                   matrix (numpy array): matrix to be reviewed.
    80                                                   
    81                                               Returns:
    82                                               
    83                                                   n (int): index of negative value in right column.
    84                                               """
    85                                               
    86                                               l = len(matrix[0, :])
    87                                               m = min(matrix[:-1, l-1])
    88                                               if m <= 0:
    89                                                   n = np.where(matrix[:-1, l-1] == m)[0][0]
    90                                               else:
    91                                                   n = None
    92                                               
    93                                               return n

Total time: 6.7e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_negative_row at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           @profile
    97                                           def find_negative_row(matrix):
    98                                               """
    99                                               Finds location of negative values in bottom row.
   100                                               
   101                                               Args:
   102                                                   
   103                                                   matrix (numpy array): matrix to be reviewed.
   104                                                   
   105                                               Returns:
   106                                               
   107                                                   n (int): index of negative value in bottom row.
   108                                               """
   109                                               
   110         4          4.0      1.0      6.0      l = len(matrix[:,0])
   111         4         11.0      2.8     16.4      m = min(matrix[l-1,:-1])
   112         4          4.0      1.0      6.0      if m <= 0:
   113         4         48.0     12.0     71.6          n = np.where(matrix[l-1, :-1] == m)[0][0]
   114                                               else:
   115                                                   n = None
   116                                               
   117         4          0.0      0.0      0.0      return n

Total time: 0 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_pivot_col at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                           @profile
   121                                           def find_pivot_col(matrix):
   122                                               """
   123                                               Finds pivot element corresponding to a negative value in right column.
   124                                               
   125                                               Args:
   126                                               
   127                                                   matrix (numpy array): matrix to be reviewed.
   128                                                   
   129                                               Returns:
   130                                                   
   131                                                   index (int): index of most negative value.
   132                                                   
   133                                                   c (int): index smallest value on row.
   134                                               """
   135                                               
   136                                               total = []
   137                                               neg = find_negative_col(matrix)
   138                                               row = matrix[neg, :-1]
   139                                               m = min(row)
   140                                               c = np.where(row == m)[0][0]
   141                                               col = matrix[:-1, c]
   142                                               for i,j in zip(col, matrix[:-1,-1]):  #i for col with neg, j for right col
   143                                                   if i != 0 and j/i > 0:
   144                                                       total.append(j/i)
   145                                                   else:
   146                                                       total.append(10000) #placeholder, might need to update for large scale
   147                                               index = total.index(min(total))
   148                                               
   149                                               return [index,c]

Total time: 0.000188 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_pivot_row at line 152

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   152                                           @profile
   153                                           def find_pivot_row(matrix):
   154                                               """
   155                                               Finds pivot element corresponding to a negative value in bottom row.
   156                                               
   157                                               Args:
   158                                                   
   159                                                   matrix (numpy array): matrix to be reviewed.
   160                                                   
   161                                               Returns:
   162                                               
   163                                                   index (int): index of most negative value.
   164                                                   
   165                                                   neg (int): index smallest value.
   166                                               """
   167                                               
   168         4         41.0     10.2     21.8      if pivots_row(matrix):
   169         4          2.0      0.5      1.1          total = []
   170         4         93.0     23.2     49.5          neg = find_negative_row(matrix)
   171        12         22.0      1.8     11.7          for i, j in zip(matrix[:-1, neg], matrix[:-1, -1]):
   172         8         14.0      1.8      7.4              if i != 0 and j/i > 0:
   173         6          3.0      0.5      1.6                  total.append(j/i)
   174                                                       else:
   175         2          2.0      1.0      1.1                  total.append(10000) #placeholder, might need to update for large scale
   176         4          7.0      1.8      3.7          index = total.index(min(total))
   177                                                   
   178         4          4.0      1.0      2.1          return [index,neg]

Total time: 0.000144 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: pivot at line 181

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   181                                           @profile
   182                                           def pivot(row,col,matrix):
   183                                               """
   184                                               Pivot about a value to remove negative in final column or row.
   185                                               
   186                                               Args:
   187                                               
   188                                                   matrix (numpy array): matrix to be reviewed.
   189                                                   
   190                                                   row (int): position to pivot.
   191                                                   
   192                                                   col (int): position to pivot.
   193                                                   
   194                                               Returns:
   195                                               
   196                                                   t (numpy array): updated matrix.
   197                                               """
   198                                               
   199         2          6.0      3.0      4.2      lr = len(matrix[:, 0])
   200         2          2.0      1.0      1.4      lc = len(matrix[0, :])
   201         2          9.0      4.5      6.2      t = np.zeros((lr, lc))
   202         2          2.0      1.0      1.4      pr = matrix[row, :]
   203         2          7.0      3.5      4.9      if matrix[row, col]**2 > 0:
   204         2          3.0      1.5      2.1          e = 1/matrix[row, col]
   205         2         13.0      6.5      9.0          r = pr*e
   206         8         11.0      1.4      7.6          for i in range(len(matrix[:, col])):
   207         6          6.0      1.0      4.2              k = matrix[i, :]
   208         6          4.0      0.7      2.8              c = matrix[i, col]
   209         6         31.0      5.2     21.5              if list(k) == list(pr):
   210         2          1.0      0.5      0.7                  continue
   211                                                       else:
   212         4         39.0      9.8     27.1                  t[i, :] = list(k-r*c)
   213         2          8.0      4.0      5.6          t[row,:] = list(r)
   214         2          2.0      1.0      1.4          return t
   215                                               else:
   216                                                   logging.info('Cannot pivot on this element')

Total time: 2.1e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/utils/general.py
Function: convert_min at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           @profile
     2                                           def convert_min(matrix):
     3                                               """
     4                                               This function multiplies by -1 the objective function for maximization problems. This is because
     5                                               if the problem to be solved is maximization then it is analogue to solve the problem -minimization.
     6                                               
     7                                               Args:
     8                                               
     9                                                   matrix (numpy array): matrix to be updated.
    10                                               
    11                                               Returns:
    12                                               
    13                                                   matrix (numpy array): matrix multiplied by -1.
    14                                               """
    15                                               
    16         1         19.0     19.0     90.5      matrix[-1, :-2] = [-1*i for i in matrix[-1, :-2]]
    17         1          2.0      2.0      9.5      matrix[-1, -1] = -1*matrix[-1, -1]
    18                                               
    19         1          0.0      0.0      0.0      return matrix

Total time: 1.8e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/utils/general.py
Function: gen_var at line 22

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    22                                           @profile
    23                                           def gen_var(matrix):
    24                                               """
    25                                               Generates the required number of variables. They are defined by the problem.
    26                                               
    27                                               Args:
    28                                               
    29                                                   matrix (numpy array): matrix to be updated.
    30                                               
    31                                               Returns:
    32                                               
    33                                                   v (list): list with problem variables.
    34                                               """
    35                                               
    36         2          2.0      1.0     11.1      lc = len(matrix[0, :])
    37         2          2.0      1.0     11.1      lr = len(matrix[:, 0])
    38                                               
    39         2          1.0      0.5      5.6      var = lc - lr -1
    40         2          1.0      0.5      5.6      v = []
    41                                               
    42         6          4.0      0.7     22.2      for i in range(var):
    43         4          7.0      1.8     38.9          v.append('x' + str(i+1))
    44                                               
    45         2          1.0      0.5      5.6      return v

Total time: 3.1e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/utils/general.py
Function: convert at line 48

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    48                                           @profile
    49                                           def convert(eq):
    50                                               """
    51                                               Converts equation into a list containing the coefficients of the equation.
    52                                               
    53                                               Args:
    54                                               
    55                                                   eq (string): equation defined with :func:`constrain`.
    56                                               
    57                                               Returns:
    58                                               
    59                                                   eq (list): list with equation coefficients.
    60                                               """
    61                                               
    62         2          5.0      2.5     16.1      eq = eq.split(',')
    63                                               
    64         2          2.0      1.0      6.5      if 'G' in eq:
    65                                                   g = eq.index('G')
    66                                                   del eq[g]
    67                                                   eq = [float(i)*-1 for i in eq]
    68                                                   return eq
    69                                               
    70         2          2.0      1.0      6.5      if 'L' in eq:
    71         2          4.0      2.0     12.9          l = eq.index('L')
    72         2          3.0      1.5      9.7          del eq[l]
    73         2         14.0      7.0     45.2          eq = [float(i) for i in eq]
    74         2          1.0      0.5      3.2          return eq
    75                                               
    76                                               if 'E' in eq:
    77                                                   l = eq.index('E')
    78                                                   del eq[l]
    79                                                   eq = [float(i) for i in eq]
    80                                                   return eq

