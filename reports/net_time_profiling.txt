Wrote profile results to net_line_profiler.py.lprof
Timer unit: 1e-06 s

Total time: 0.001489 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: add_cons at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def add_cons(matrix):
    10                                               """
    11                                               Checks if 1 extra constraint can be added to the matrix, this means that there are at least two rows of all
    12                                               0 elements. If this condition is not satisfied, our program will not allow the user to add additional constraints.
    13                                               
    14                                               Args:
    15                                               
    16                                                   matrix (numpy array): matrix to be reviewed.
    17                                               
    18                                               Returns:
    19                                               
    20                                                   Flag (bool): True or False indicating whether 1+ constraints can be added.
    21                                               """
    22                                           
    23         7          7.0      1.0      0.5      lr = len(matrix[:, 0])
    24         7          4.0      0.6      0.3      empty = []
    25                                           
    26        63         29.0      0.5      1.9      for i in range(lr):
    27        56         22.0      0.4      1.5          total = 0
    28       952        544.0      0.6     36.5          for j in matrix[i, :]:
    29       896        815.0      0.9     54.7              total += j**2
    30        56         40.0      0.7      2.7          if total == 0:
    31        35         19.0      0.5      1.3              empty.append(total)
    32                                           
    33         7          4.0      0.6      0.3      if len(empty) > 1:
    34         7          5.0      0.7      0.3          return True
    35                                               else:
    36                                                   return False

Total time: 0.003496 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: constrain at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           @profile
    40                                           def constrain(matrix, eq):
    41                                               """
    42                                               Adds constraints to the problem.
    43                                               
    44                                               Args:
    45                                               
    46                                                   matrix (numpy array): matrix defined with :mod:`create_matrix`.
    47                                                   
    48                                                   eq (string): coefficients of constraints expressions. Use **L** for *less than*, **G** for *greater than*, **E** for *equal to*.
    49                                               
    50                                               >>> problem_matrix = create_matrix(2,3)   # 2 variables and 3 constraints
    51                                               >>> constrain(problem_matrix,'1,L,4')     # x_1 <= 4
    52                                               >>> constrain(problem_matrix,'0,2,L,12')  # 2x_2 <= 12
    53                                               >>> constrain(problem_matrix,'3,2,G,18')  # 3x_1 + 2x_2 >= 18
    54                                               """
    55                                           
    56         7          7.0      1.0      0.2      if 'E' in eq:
    57         5       1661.0    332.2     47.5          if add_cons(matrix):
    58         5          5.0      1.0      0.1              lc = len(matrix[0, :])
    59         5          5.0      1.0      0.1              lr = len(matrix[:, 0])
    60         5          1.0      0.2      0.0              var = lc - lr - 1
    61         5          1.0      0.2      0.0              j = 0
    62                                           
    63        15         11.0      0.7      0.3              while j < lr:
    64        15         15.0      1.0      0.4                  row_check = matrix[j,:]
    65        15          7.0      0.5      0.2                  total = 0
    66       255        171.0      0.7      4.9                  for i in row_check:
    67       240        252.0      1.1      7.2                      total += float(i**2)
    68        15          6.0      0.4      0.2                  if total == 0:
    69         5          1.0      0.2      0.0                      row = row_check
    70         5          2.0      0.4      0.1                      break
    71        10          6.0      0.6      0.2                  j += 1
    72                                                           
    73         5        117.0     23.4      3.3              eq = convert(eq)
    74         5          4.0      0.8      0.1              i = 0
    75                                                       
    76        40         27.0      0.7      0.8              while i<len(eq)-1:
    77        35         22.0      0.6      0.6                  row[i] = eq[i]
    78        35         22.0      0.6      0.6                  i += 1
    79                                                       
    80         5          5.0      1.0      0.1              row[-1] = eq[-1]
    81                                                       #row[var+j] = 1
    82                                                   
    83                                                   else:
    84                                                       logging.info('Cannot add another constraint.')
    85                                                   
    86                                               else:
    87         2        645.0    322.5     18.4          if add_cons(matrix):
    88         2          3.0      1.5      0.1              lc = len(matrix[0, :])
    89         2          2.0      1.0      0.1              lr = len(matrix[:, 0])
    90         2          0.0      0.0      0.0              var = lc - lr -1
    91         2          1.0      0.5      0.0              j = 0
    92                                                       
    93        13         11.0      0.8      0.3              while j < lr:
    94        13         13.0      1.0      0.4                  row_check = matrix[j, :]
    95        13          3.0      0.2      0.1                  total = 0
    96       221        150.0      0.7      4.3                  for i in row_check:
    97       208        224.0      1.1      6.4                      total += float(i**2)
    98        13         11.0      0.8      0.3                  if total == 0:
    99         2          2.0      1.0      0.1                      row = row_check
   100         2          1.0      0.5      0.0                      break
   101        11         10.0      0.9      0.3                  j +=1
   102                                                           
   103         2         39.0     19.5      1.1              eq = convert(eq)
   104         2          1.0      0.5      0.0              i = 0
   105                                                       
   106        16         13.0      0.8      0.4              while i<len(eq)-1:
   107        14          7.0      0.5      0.2                  row[i] = eq[i]
   108        14         10.0      0.7      0.3                  i += 1
   109                                                       
   110         2          0.0      0.0      0.0              row[-1] = eq[-1]
   111         2          2.0      1.0      0.1              row[var+j] = 1
   112                                                       
   113                                                   else:
   114                                                       logging.info('Cannot add another constraint.')

Total time: 0.000208 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: add_obj at line 117

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   117                                           @profile
   118                                           def add_obj(matrix):
   119                                               """
   120                                               Verifies if the objective function can be added.
   121                                               
   122                                               Args:
   123                                               
   124                                                   matrix (numpy array): matrix to be reviewed.
   125                                               
   126                                               Returns:
   127                                               
   128                                                   Flag (bool): True or False indicating whether objective function can be added.
   129                                               """
   130                                               
   131         1          1.0      1.0      0.5      lr = len(matrix[:,0])
   132         1          0.0      0.0      0.0      empty = []
   133                                               
   134         9          6.0      0.7      2.9      for i in range(lr):
   135         8          3.0      0.4      1.4          total = 0
   136       136         72.0      0.5     34.6          for j in matrix[i, :]:
   137       128        116.0      0.9     55.8              total += j**2
   138         8          7.0      0.9      3.4          if total == 0:
   139         1          1.0      1.0      0.5              empty.append(total)
   140                                               
   141         1          1.0      1.0      0.5      if len(empty) == 1:
   142         1          1.0      1.0      0.5          return True
   143                                               else:
   144                                                   return False

Total time: 0.000342 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: obj at line 147

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   147                                           @profile
   148                                           def obj(matrix,eq):
   149                                               """
   150                                               Adds the objective function to the problem matrix.
   151                                               
   152                                               .. note::
   153                                                   Objective function must be added **after** constraints have been input.
   154                                               
   155                                               Args:
   156                                               
   157                                                   matrix (numpy array): matrix defined with :mod:`create_matrix`.
   158                                                   
   159                                                   eq (string): coefficients of objective function.
   160                                               
   161                                               >>> problem_matrix = create_matrix(2,3)   # 2 variables and 3 constraints
   162                                               >>> constrain(problem_matrix,'1,L,4')     # x_1 <= 4
   163                                               >>> constrain(problem_matrix,'0,2,L,12')  # 2x_2 <= 12
   164                                               >>> constrain(problem_matrix,'4,2,G,18')  # 4x_1 + 2x_2 >= 18
   165                                               >>> obj(problem_matrix,'3,5,0')           # 3x_1 + 5x_2
   166                                               """
   167                                               
   168         1        320.0    320.0     93.6      if add_obj(matrix):
   169         1          4.0      4.0      1.2          eq = [float(i) for i in eq.split(',')]
   170         1          1.0      1.0      0.3          lr = len(matrix[:,0])
   171         1          1.0      1.0      0.3          row = matrix[lr-1,:]
   172         1          0.0      0.0      0.0          i = 0
   173         8          6.0      0.8      1.8          while i<len(eq)-1:
   174         7          5.0      0.7      1.5              row[i] = eq[i]*-1
   175         7          4.0      0.6      1.2              i +=1
   176         1          0.0      0.0      0.0          row[-2] = 1
   177         1          1.0      1.0      0.3          row[-1] = eq[-1]
   178                                               else:
   179                                                   logging.info('You must finish adding constraints before the objective function can be added.')

Total time: 0 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: maxz at line 182

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   182                                           @profile
   183                                           def maxz(matrix):
   184                                               """
   185                                               Creates maximization function. Determines if 1 extra pivot is required, locates the pivot element,
   186                                               pivots about it and continues the process until all negative elements have been removed from
   187                                               the last column and row.
   188                                               
   189                                               Args:
   190                                               
   191                                                   matrix (numpy array): problem matrix with constraints and objective function added.
   192                                               
   193                                               Returns:
   194                                               
   195                                                   *(dict)* A dictionary with Max and variables.
   196                                                   
   197                                               >>> problem_matrix = create_matrix(2,3)   # 2 variables and 3 constraints
   198                                               >>> constrain(problem_matrix,'1,L,4')     # x_1 <= 4
   199                                               >>> constrain(problem_matrix,'0,2,L,12')  # 2x_2 <= 12
   200                                               >>> constrain(problem_matrix,'4,2,G,18')  # 4x_1 + 2x_2 >= 18
   201                                               >>> obj(problem_matrix,'3,5,0')           # 3x_1 + 5x_2
   202                                               >>> maxz(problem_matrix)
   203                                               {'x1': 4.0, 'x2': 6.0, 'max': 42.0}
   204                                               """
   205                                               
   206                                               while pivots_col(matrix):
   207                                                   matrix = pivot(find_pivot_col(matrix)[0], find_pivot_col(matrix)[1], matrix)
   208                                               while pivots_row(matrix):
   209                                                   matrix = pivot(find_pivot_row(matrix)[0], find_pivot_row(matrix)[1], matrix)
   210                                               
   211                                               lc = len(matrix[0, :])
   212                                               lr = len(matrix[:, 0])
   213                                               var = lc - lr - 1
   214                                               i = 0
   215                                               val = {}
   216                                               
   217                                               for i in range(var):
   218                                                   col = matrix[:, i]
   219                                                   s = sum(col)
   220                                                   m = max(col)
   221                                                   if float(s) == float(m):
   222                                                       loc = np.where(col == m)[0][0]
   223                                                       val[gen_var(matrix)[i]] = matrix[loc, -1]
   224                                                   else:
   225                                                       val[gen_var(matrix)[i]] = 0
   226                                               val['max'] = matrix[-1, -1]
   227                                               
   228                                               return val

Total time: 0.001934 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/problem_definition.py
Function: minz at line 231

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   231                                           @profile
   232                                           def minz(matrix):
   233                                               """
   234                                               Creates minimization function. Determines if 1 extra pivot is required, locates the pivot element,
   235                                               pivots about it and continues the process until all negative elements have been removed from 
   236                                               the last column and row.
   237                                               
   238                                               Args:
   239                                               
   240                                                   matrix (numpy array): problem matrix with constraints and objective function added.
   241                                               
   242                                               Returns:
   243                                               
   244                                                   (dict) A dictionary with Min and variables.
   245                                                   
   246                                               >>> problem_matrix = create_matrix(2,4)   # 2 variables and 4 constraints
   247                                               >>> constrain(problem_matrix,'1,1,L,6')   # x_1 + x_2 <= 6
   248                                               >>> constrain(problem_matrix,'-1,2,L,8')  # -x_1 + 2x_2 <= 8
   249                                               >>> constrain(problem_matrix,'1,G,0')     # x_1 >= 0
   250                                               >>> constrain(problem_matrix,'0,1,G,0')   # x_2 >= 0
   251                                               >>> obj(problem_matrix,'-1,-3,0')         # -x_1 - 3x_2
   252                                               >>> minz(problem_matrix)
   253                                               {'x1': 1.3333333333333333, 'x2': 4.666666666666667}
   254                                               """
   255                                           
   256         1         25.0     25.0      1.3      matrix = convert_min(matrix)
   257         5         43.0      8.6      2.2      while pivots_col(matrix):
   258         4       1230.0    307.5     63.6          matrix = pivot(find_pivot_col(matrix)[0], find_pivot_col(matrix)[1], matrix)
   259         2         22.0     11.0      1.1      while pivots_row(matrix):
   260         1        355.0    355.0     18.4          matrix = pivot(find_pivot_row(matrix)[0], find_pivot_row(matrix)[1], matrix)
   261                                               
   262         1          1.0      1.0      0.1      lc = len(matrix[0, :])
   263         1          1.0      1.0      0.1      lr = len(matrix[:, 0])
   264         1          1.0      1.0      0.1      var = lc - lr - 1
   265         1          1.0      1.0      0.1      i = 0
   266         1          1.0      1.0      0.1      val = {}
   267                                               
   268         8          6.0      0.8      0.3      for i in range(var):
   269         7          7.0      1.0      0.4          col = matrix[:, i]
   270         7         24.0      3.4      1.2          s = sum(col)
   271         7         17.0      2.4      0.9          m = max(col)
   272         7          8.0      1.1      0.4          if float(s) == float(m):
   273         5         29.0      5.8      1.5              loc = np.where(col == m)[0][0]
   274         5        114.0     22.8      5.9              val[gen_var(matrix)[i]] = matrix[loc, -1]
   275                                                   else:
   276         2         47.0     23.5      2.4              val[gen_var(matrix)[i]] = 0
   277         1          1.0      1.0      0.1      val['min'] = matrix[-1, -1]*-1
   278                                               
   279         1          1.0      1.0      0.1      return val

Total time: 6e-06 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: create_matrix at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def create_matrix(variables, constraints):
     7                                               """
     8                                               Creates a matrix with enough rows for each constraint plus the objective function
     9                                               and enough columns for all the variables.
    10                                               
    11                                               Args:
    12                                               
    13                                                   variables (int): number of variables.
    14                                                   
    15                                                   constraints (int): number of constraints.
    16                                               
    17                                               Returns:
    18                                               
    19                                                   matrix (numpy array): zero matrix.
    20                                               """
    21                                               
    22         1          5.0      5.0     83.3      matrix = np.zeros((constraints + 1, variables + constraints + 2))
    23                                               
    24         1          1.0      1.0     16.7      return matrix

Total time: 2.3e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: pivots_col at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def pivots_col(matrix):
    29                                               """
    30                                               Checks to see if pivots are required due to negative values in right column,
    31                                               excluding the bottom value.
    32                                               
    33                                               Args:
    34                                               
    35                                                   matrix (numpy array): matrix to be reviewed.
    36                                                   
    37                                               Returns:
    38                                               
    39                                                   Flag (bool): True or False indicating whether a negative element was found.
    40                                               """
    41                                               
    42         5         16.0      3.2     69.6      m = min(matrix[:-1, -1])
    43         5          4.0      0.8     17.4      if m >= 0:
    44         1          1.0      1.0      4.3          return False
    45                                               else:
    46         4          2.0      0.5      8.7          return True

Total time: 2.4e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: pivots_row at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                           @profile
    50                                           def pivots_row(matrix):
    51                                               """
    52                                               Checks to see if pivots are required due to negative values in bottom row, 
    53                                               excluding the final value.
    54                                               
    55                                               Args:
    56                                               
    57                                                   matrix (numpy array): matrix to be reviewed.
    58                                                   
    59                                               Returns:
    60                                               
    61                                                   Flag (bool): True or False indicating whether a negative element was found.
    62                                               """
    63                                               
    64         4          5.0      1.2     20.8      l = len(matrix[:, 0])
    65         4         15.0      3.8     62.5      m = min(matrix[l-1, :-1])
    66         4          3.0      0.8     12.5      if m >= 0:
    67         1          0.0      0.0      0.0          return False
    68                                               else:
    69         3          1.0      0.3      4.2          return True

Total time: 9.7e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_negative_col at line 72

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    72                                           @profile
    73                                           def find_negative_col(matrix):
    74                                               """
    75                                               Finds location of negative values in right column.
    76                                               
    77                                               Args:
    78                                                   
    79                                                   matrix (numpy array): matrix to be reviewed.
    80                                                   
    81                                               Returns:
    82                                               
    83                                                   n (int): index of negative value in right column.
    84                                               """
    85                                               
    86         8         10.0      1.2     10.3      l = len(matrix[0, :])
    87         8         22.0      2.8     22.7      m = min(matrix[:-1, l-1])
    88         8          8.0      1.0      8.2      if m <= 0:
    89         8         55.0      6.9     56.7          n = np.where(matrix[:-1, l-1] == m)[0][0]
    90                                               else:
    91                                                   n = None
    92                                               
    93         8          2.0      0.2      2.1      return n

Total time: 2.4e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_negative_row at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           @profile
    97                                           def find_negative_row(matrix):
    98                                               """
    99                                               Finds location of negative values in bottom row.
   100                                               
   101                                               Args:
   102                                                   
   103                                                   matrix (numpy array): matrix to be reviewed.
   104                                                   
   105                                               Returns:
   106                                               
   107                                                   n (int): index of negative value in bottom row.
   108                                               """
   109                                               
   110         2          2.0      1.0      8.3      l = len(matrix[:,0])
   111         2          7.0      3.5     29.2      m = min(matrix[l-1,:-1])
   112         2          2.0      1.0      8.3      if m <= 0:
   113         2         12.0      6.0     50.0          n = np.where(matrix[l-1, :-1] == m)[0][0]
   114                                               else:
   115                                                   n = None
   116                                               
   117         2          1.0      0.5      4.2      return n

Total time: 0.000405 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_pivot_col at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                           @profile
   121                                           def find_pivot_col(matrix):
   122                                               """
   123                                               Finds pivot element corresponding to a negative value in right column.
   124                                               
   125                                               Args:
   126                                               
   127                                                   matrix (numpy array): matrix to be reviewed.
   128                                                   
   129                                               Returns:
   130                                                   
   131                                                   index (int): index of most negative value.
   132                                                   
   133                                                   c (int): index smallest value on row.
   134                                               """
   135                                               
   136         8          4.0      0.5      1.0      total = []
   137         8        133.0     16.6     32.8      neg = find_negative_col(matrix)
   138         8          9.0      1.1      2.2      row = matrix[neg, :-1]
   139         8         30.0      3.8      7.4      m = min(row)
   140         8         40.0      5.0      9.9      c = np.where(row == m)[0][0]
   141         8          9.0      1.1      2.2      col = matrix[:-1, c]
   142        64         59.0      0.9     14.6      for i,j in zip(col, matrix[:-1,-1]):  #i for col with neg, j for right col
   143        56         55.0      1.0     13.6          if i != 0 and j/i > 0:
   144        16         15.0      0.9      3.7              total.append(j/i)
   145                                                   else:
   146        40         21.0      0.5      5.2              total.append(10000) #placeholder, might need to update for large scale
   147         8         23.0      2.9      5.7      index = total.index(min(total))
   148                                               
   149         8          7.0      0.9      1.7      return [index,c]

Total time: 0.000107 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: find_pivot_row at line 152

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   152                                           @profile
   153                                           def find_pivot_row(matrix):
   154                                               """
   155                                               Finds pivot element corresponding to a negative value in bottom row.
   156                                               
   157                                               Args:
   158                                                   
   159                                                   matrix (numpy array): matrix to be reviewed.
   160                                                   
   161                                               Returns:
   162                                               
   163                                                   index (int): index of most negative value.
   164                                                   
   165                                                   neg (int): index smallest value.
   166                                               """
   167                                               
   168         2         20.0     10.0     18.7      if pivots_row(matrix):
   169         2          0.0      0.0      0.0          total = []
   170         2         33.0     16.5     30.8          neg = find_negative_row(matrix)
   171        16         19.0      1.2     17.8          for i, j in zip(matrix[:-1, neg], matrix[:-1, -1]):
   172        14         14.0      1.0     13.1              if i != 0 and j/i > 0:
   173         4          4.0      1.0      3.7                  total.append(j/i)
   174                                                       else:
   175        10          7.0      0.7      6.5                  total.append(10000) #placeholder, might need to update for large scale
   176         2          8.0      4.0      7.5          index = total.index(min(total))
   177                                                   
   178         2          2.0      1.0      1.9          return [index,neg]

Total time: 0.000677 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/simplex/simplex_networks.py
Function: pivot at line 181

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   181                                           @profile
   182                                           def pivot(row,col,matrix):
   183                                               """
   184                                               Pivot about a value to remove negative in final column or row.
   185                                               
   186                                               Args:
   187                                               
   188                                                   matrix (numpy array): matrix to be reviewed.
   189                                                   
   190                                                   row (int): position to pivot.
   191                                                   
   192                                                   col (int): position to pivot.
   193                                                   
   194                                               Returns:
   195                                               
   196                                                   t (numpy array): updated matrix.
   197                                               """
   198                                               
   199         5          6.0      1.2      0.9      lr = len(matrix[:, 0])
   200         5          5.0      1.0      0.7      lc = len(matrix[0, :])
   201         5          9.0      1.8      1.3      t = np.zeros((lr, lc))
   202         5          4.0      0.8      0.6      pr = matrix[row, :]
   203         5          8.0      1.6      1.2      if matrix[row, col]**2 > 0:
   204         5          5.0      1.0      0.7          e = 1/matrix[row, col]
   205         5         13.0      2.6      1.9          r = pr*e
   206        45         25.0      0.6      3.7          for i in range(len(matrix[:, col])):
   207        40         27.0      0.7      4.0              k = matrix[i, :]
   208        40         32.0      0.8      4.7              c = matrix[i, col]
   209        40        224.0      5.6     33.1              if list(k) == list(pr):
   210         5          2.0      0.4      0.3                  continue
   211                                                       else:
   212        35        290.0      8.3     42.8                  t[i, :] = list(k-r*c)
   213         5         26.0      5.2      3.8          t[row,:] = list(r)
   214         5          1.0      0.2      0.1          return t
   215                                               else:
   216                                                   logging.info('Cannot pivot on this element')

Total time: 1.7e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/utils/general.py
Function: convert_min at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           @profile
     2                                           def convert_min(matrix):
     3                                               """
     4                                               This function multiplies by -1 the objective function for maximization problems. This is because
     5                                               if the problem to be solved is maximization then it is analogue to solve the problem -minimization.
     6                                               
     7                                               Args:
     8                                               
     9                                                   matrix (numpy array): matrix to be updated.
    10                                               
    11                                               Returns:
    12                                               
    13                                                   matrix (numpy array): matrix multiplied by -1.
    14                                               """
    15                                               
    16         1         15.0     15.0     88.2      matrix[-1, :-2] = [-1*i for i in matrix[-1, :-2]]
    17         1          2.0      2.0     11.8      matrix[-1, -1] = -1*matrix[-1, -1]
    18                                               
    19         1          0.0      0.0      0.0      return matrix

Total time: 7.9e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/utils/general.py
Function: gen_var at line 21

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    21                                           @profile
    22                                           def gen_var(matrix):
    23                                               """
    24                                               Generates the required number of variables. They are defined by the problem.
    25                                               
    26                                               Args:
    27                                               
    28                                                   matrix (numpy array): matrix to be updated.
    29                                               
    30                                               Returns:
    31                                               
    32                                                   v (list): list with problem variables.
    33                                               """
    34                                               
    35         7          7.0      1.0      8.9      lc = len(matrix[0, :])
    36         7          6.0      0.9      7.6      lr = len(matrix[:, 0])
    37                                               
    38         7          0.0      0.0      0.0      var = lc - lr -1
    39         7          3.0      0.4      3.8      v = []
    40                                               
    41        56         20.0      0.4     25.3      for i in range(var):
    42        49         39.0      0.8     49.4          v.append('x' + str(i+1))
    43                                               
    44         7          4.0      0.6      5.1      return v

Total time: 7.9e-05 s
File: /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/mex/utils/general.py
Function: convert at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                           @profile
    47                                           def convert(eq):
    48                                               """
    49                                               Converts equation into a list containing the coefficients of the equation.
    50                                               
    51                                               Args:
    52                                               
    53                                                   eq (string): equation defined with :func:`constrain`.
    54                                               
    55                                               Returns:
    56                                               
    57                                                   eq (list): list with equation coefficients.
    58                                               """
    59                                               
    60         7          8.0      1.1     10.1      eq = eq.split(',')
    61                                               
    62         7          8.0      1.1     10.1      if 'G' in eq:
    63                                                   g = eq.index('G')
    64                                                   del eq[g]
    65                                                   eq = [float(i)*-1 for i in eq]
    66                                                   return eq
    67                                               
    68         7          6.0      0.9      7.6      if 'L' in eq:
    69         2          3.0      1.5      3.8          l = eq.index('L')
    70         2          2.0      1.0      2.5          del eq[l]
    71         2          8.0      4.0     10.1          eq = [float(i) for i in eq]
    72         2          1.0      0.5      1.3          return eq
    73                                               
    74         5          5.0      1.0      6.3      if 'E' in eq:
    75         5          7.0      1.4      8.9          l = eq.index('E')
    76         5          4.0      0.8      5.1          del eq[l]
    77         5         24.0      4.8     30.4          eq = [float(i) for i in eq]
    78         5          3.0      0.6      3.8          return eq

